import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

from config import BOT_TOKEN, ADMIN_IDS, DB_PATH
from database import Database
from payments import payments_router
from video_handler import video_router

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
db = Database(DB_PATH)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
dp.include_router(payments_router)
dp.include_router(video_router)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class UserStates(StatesGroup):
    choosing_course = State()
    watching_lesson = State()
    taking_test = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_menu_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚öΩ –ú–æ–∏ –∫—É—Ä—Å—ã", callback_data="my_courses")],
        [InlineKeyboardButton(text="üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="my_progress")],
        [InlineKeyboardButton(text="üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="testing")],
        [InlineKeyboardButton(text="üí∞ –ö—É–ø–∏—Ç—å –∫—É—Ä—Å", callback_data="buy_course")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ])
    return keyboard

def admin_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_stats")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫", callback_data="admin_add_lesson")],
        [InlineKeyboardButton(text="üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏", callback_data="admin_tasks")],
        [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    return keyboard

def back_button():
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
    ]])

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    full_name = message.from_user.full_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.add_user(user_id, username, full_name)
    
    welcome_text = (
        f"‚öΩ –ü—Ä–∏–≤–µ—Ç, {full_name}!\n\n"
        "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É —Ñ—É—Ç–±–æ–ª—å–Ω—É—é —à–∫–æ–ª—É!\n\n"
        "–ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å:\n"
        "üìö –ò–∑—É—á–∞—Ç—å —Ç–µ—Ö–Ω–∏–∫—É —Ñ—É—Ç–±–æ–ª–∞\n"
        "üé• –°–º–æ—Ç—Ä–µ—Ç—å –æ–±—É—á–∞—é—â–∏–µ –≤–∏–¥–µ–æ\n"
        "üéØ –í—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è –∏ —Ç–µ—Å—Ç—ã\n"
        "‚≠ê –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—á–∫–∏ –∑–∞ —É—Å–ø–µ—Ö–∏\n"
        "üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if user_id in ADMIN_IDS:
        await message.answer(
            welcome_text + "\n\nüîß <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞!</b>", 
            reply_markup=admin_keyboard(),
            parse_mode="HTML"
        )
    else:
        await message.answer(welcome_text, reply_markup=main_menu_keyboard())

# –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.callback_query(F.data == "main_menu")
async def back_to_main(callback: CallbackQuery):
    user_id = callback.from_user.id
    
    if user_id in ADMIN_IDS:
        await callback.message.edit_text(
            "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\nüîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞!",
            reply_markup=admin_keyboard(),
            parse_mode="HTML"
        )
    else:
        await callback.message.edit_text(
            "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_menu_keyboard(),
            parse_mode="HTML"
        )

# –ü–æ–∫–∞–∑–∞—Ç—å –∫—É—Ä—Å—ã
@dp.callback_query(F.data == "my_courses")
async def show_courses(callback: CallbackQuery):
    courses = db.get_courses()
    
    if not courses:
        await callback.message.edit_text(
            "üìö –ö—É—Ä—Å—ã –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.\n\n"
            "üîî –ö—É—Ä—Å—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
            reply_markup=back_button()
        )
        return
    
    text = "‚öΩ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã:</b>\n\n"
    keyboard_buttons = []
    
    for course_id, title, description, price in courses:
        text += (
            f"üìñ <b>{title}</b>\n"
            f"{description}\n"
            f"üí∞ <b>–¶–µ–Ω–∞:</b> {price} —Ä—É–±.\n\n"
        )
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=f"üìñ {title}", 
                callback_data=f"course_{course_id}"
            )
        ])
    
    keyboard_buttons.append([
        InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    ])
    
    await callback.message.edit_text(
        text, 
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons),
        parse_mode="HTML"
    )

# –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
@dp.callback_query(F.data == "my_progress")
async def show_progress(callback: CallbackQuery):
    user_id = callback.from_user.id
    progress = db.get_user_progress(user_id)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—á–∫–æ–≤
    points = progress['total_points']
    if points < 100:
        level = "ü•â –ù–æ–≤–∏—á–æ–∫"
        level_emoji = "üå±"
    elif points < 500:
        level = "ü•à –õ—é–±–∏—Ç–µ–ª—å"
        level_emoji = "‚ö°"
    elif points < 1000:
        level = "ü•á –≠–∫—Å–ø–µ—Ä—Ç"
        level_emoji = "üî•"
    else:
        level = "üèÜ –ú–∞—Å—Ç–µ—Ä"
        level_emoji = "‚≠ê"
    
    progress_text = (
        f"üìä <b>–¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å:</b>\n\n"
        f"{level_emoji} <b>–£—Ä–æ–≤–µ–Ω—å:</b> {level}\n"
        f"‚≠ê <b>–í—Å–µ–≥–æ –æ—á–∫–æ–≤:</b> {points}\n"
        f"üìö <b>–ü—Ä–æ–π–¥–µ–Ω–æ —É—Ä–æ–∫–æ–≤:</b> {progress['completed_lessons']}\n"
        f"‚úÖ <b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π:</b> {progress['completed_tasks']}\n\n"
        f"üí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è!\n"
        f"–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: {max(0, (((points // 100) + 1) * 100) - points)} –æ—á–∫–æ–≤"
    )
    
    await callback.message.edit_text(
        progress_text,
        reply_markup=back_button(),
        parse_mode="HTML"
    )

# –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
@dp.callback_query(F.data == "testing")
async def show_testing(callback: CallbackQuery):
    await callback.message.edit_text(
        "üéØ <b>–†–∞–∑–¥–µ–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ–π—Ç–∏ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–µ—Å—Ç—ã "
        "–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –≤ —Ñ—É—Ç–±–æ–ª–µ!\n\n"
        "–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Ç–µ—Å—Ç–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìù –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç", callback_data="theory_test")],
            [InlineKeyboardButton(text="‚öΩ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="practical_test")],
            [InlineKeyboardButton(text="üß† –¢–µ—Å—Ç –Ω–∞ –ø—Ä–∞–≤–∏–ª–∞", callback_data="rules_test")],
            [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]),
        parse_mode="HTML"
    )

# –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç (–ø—Ä–∏–º–µ—Ä)
@dp.callback_query(F.data == "theory_test")
async def theory_test(callback: CallbackQuery):
    test_question = (
        "üìù <b>–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç - –í–æ–ø—Ä–æ—Å 1/5</b>\n\n"
        "‚ùì <b>–°–∫–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø–æ–ª–µ "
        "–æ—Ç –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –≤–æ –≤—Ä–µ–º—è –º–∞—Ç—á–∞?</b>\n\n"
        "–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="A) 10 –∏–≥—Ä–æ–∫–æ–≤", callback_data="answer_a")],
        [InlineKeyboardButton(text="B) 11 –∏–≥—Ä–æ–∫–æ–≤", callback_data="answer_b")],
        [InlineKeyboardButton(text="C) 12 –∏–≥—Ä–æ–∫–æ–≤", callback_data="answer_c")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Ç–µ—Å—Ç–∞–º", callback_data="testing")]
    ])
    
    await callback.message.edit_text(test_question, reply_markup=keyboard, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Ç–µ—Å—Ç–∞
@dp.callback_query(F.data.in_(["answer_a", "answer_b", "answer_c"]))
async def handle_test_answer(callback: CallbackQuery):
    user_id = callback.from_user.id
    
    if callback.data == "answer_b":  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        points_earned = 20
        db.add_points(user_id, points_earned)
        
        result_text = (
            "‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</b>\n\n"
            f"üéâ –¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª {points_earned} –æ—á–∫–æ–≤!\n\n"
            "–í —Ñ—É—Ç–±–æ–ª–µ –Ω–∞ –ø–æ–ª–µ –æ—Ç –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã "
            "–Ω–∞—Ö–æ–¥–∏—Ç—Å—è 11 –∏–≥—Ä–æ–∫–æ–≤ (–≤–∫–ª—é—á–∞—è –≤—Ä–∞—Ç–∞—Ä—è).\n\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∞–π –∏–∑—É—á–∞—Ç—å —Ñ—É—Ç–±–æ–ª! üí™"
        )
    else:
        result_text = (
            "‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ</b>\n\n"
            "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>11 –∏–≥—Ä–æ–∫–æ–≤</b>\n\n"
            "–í —Ñ—É—Ç–±–æ–ª–µ –Ω–∞ –ø–æ–ª–µ –æ—Ç –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã "
            "–Ω–∞—Ö–æ–¥–∏—Ç—Å—è 11 –∏–≥—Ä–æ–∫–æ–≤ (–≤–∫–ª—é—á–∞—è –≤—Ä–∞—Ç–∞—Ä—è).\n\n"
            "–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è, –ø—Ä–æ–¥–æ–ª–∂–∞–π —É—á–∏—Ç—å—Å—è! üìö"
        )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", callback_data="theory_test")],
        [InlineKeyboardButton(text="üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="my_progress")],
        [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(result_text, reply_markup=keyboard, parse_mode="HTML")

# –ü–æ–∫—É–ø–∫–∞ –∫—É—Ä—Å–∞
@dp.callback_query(F.data == "buy_course")
async def buy_course(callback: CallbackQuery):
    courses = db.get_courses()
    
    if not courses:
        await callback.message.edit_text(
            "üìö –ö—É—Ä—Å—ã –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏.",
            reply_markup=back_button()
        )
        return
    
    text = "üí∞ <b>–ü–æ–∫—É–ø–∫–∞ –∫—É—Ä—Å–æ–≤</b>\n\n"
    keyboard_buttons = []
    
    for course_id, title, description, price in courses:
        text += f"üìñ <b>{title}</b> - {price} —Ä—É–±.\n"
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=f"üí≥ –ö—É–ø–∏—Ç—å {title}", 
                callback_data=f"purchase_{course_id}"
            )
        ])
    
    text += "\nüí° <i>–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏:</i>"
    keyboard_buttons.append([
        InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    ])
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons),
        parse_mode="HTML"
    )

# –ü–æ–º–æ—â—å
@dp.callback_query(F.data == "help")
async def show_help(callback: CallbackQuery):
    help_text = (
        "‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n"
        
        "üéØ <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:</b>\n\n"
        
        "1Ô∏è‚É£ <b>–ö—É—Ä—Å—ã</b> - –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã –æ–±—É—á–µ–Ω–∏—è\n"
        "2Ô∏è‚É£ <b>–ü—Ä–æ–≥—Ä–µ—Å—Å</b> - —Å–ª–µ–¥–∏ –∑–∞ —Å–≤–æ–∏–º–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏\n"
        "3Ô∏è‚É£ <b>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</b> - –ø—Ä–æ—Ö–æ–¥–∏ —Ç–µ—Å—Ç—ã –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –æ—á–∫–∏\n"
        "4Ô∏è‚É£ <b>–ü–æ–∫—É–ø–∫–∞</b> - –ø—Ä–∏–æ–±—Ä–µ—Ç–∞–π –∫—É—Ä—Å—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è\n\n"
        
        "‚≠ê <b>–°–∏—Å—Ç–µ–º–∞ –æ—á–∫–æ–≤:</b>\n"
        "‚Ä¢ –ó–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —É—Ä–æ–∫–∞: 10 –æ—á–∫–æ–≤\n"
        "‚Ä¢ –ó–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —Ç–µ—Å—Ç–µ: 20 –æ—á–∫–æ–≤\n"
        "‚Ä¢ –ó–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è: 30 –æ—á–∫–æ–≤\n\n"
        
        "üèÜ <b>–£—Ä–æ–≤–Ω–∏:</b>\n"
        "üå± –ù–æ–≤–∏—á–æ–∫: 0-99 –æ—á–∫–æ–≤\n"
        "‚ö° –õ—é–±–∏—Ç–µ–ª—å: 100-499 –æ—á–∫–æ–≤\n"
        "üî• –≠–∫—Å–ø–µ—Ä—Ç: 500-999 –æ—á–∫–æ–≤\n"
        "‚≠ê –ú–∞—Å—Ç–µ—Ä: 1000+ –æ—á–∫–æ–≤\n\n"
        
        "‚ùì –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏."
    )
    
    await callback.message.edit_text(
        help_text,
        reply_markup=back_button(),
        parse_mode="HTML"
    )

# –ê–¥–º–∏–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@dp.callback_query(F.data == "admin_stats")
async def admin_stats(callback: CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
        return
    
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats_text = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
        "üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 0\n"
        "üìö –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫—É—Ä—Å–æ–≤: 3\n"
        "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: 0\n\n"
        "üìà <i>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</i>"
    )
    
    await callback.message.edit_text(
        stats_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="main_menu")
        ]]),
        parse_mode="HTML"
    )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    print(f"üìã –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {DB_PATH}")
    
    # –£–¥–∞–ª—è–µ–º webhook –∏ –∑–∞–ø—É—Å–∫–∞–µ–º polling
    await bot.delete_webhook(drop_pending_updates=True)
    print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
import asyncio
import logging
import sqlite3
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

from config import BOT_TOKEN, ADMIN_IDS, DB_PATH
from database import Database
from payments import payments_router
from video_handler import video_router

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
db = Database(DB_PATH)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
dp.include_router(payments_router)
dp.include_router(video_router)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class UserStates(StatesGroup):
    choosing_course = State()
    watching_lesson = State()
    taking_test = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_menu_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚öΩ –ú–æ–∏ –∫—É—Ä—Å—ã", callback_data="my_courses")],
        [InlineKeyboardButton(text="üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="my_progress")],
        [InlineKeyboardButton(text="üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="testing")],
        [InlineKeyboardButton(text="üí∞ –ö—É–ø–∏—Ç—å –∫—É—Ä—Å", callback_data="buy_course")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ])
    return keyboard

def admin_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_stats")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫", callback_data="admin_add_lesson")],
        [InlineKeyboardButton(text="üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏", callback_data="admin_tasks")],
        [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    return keyboard

def back_button():
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
    ]])

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    full_name = message.from_user.full_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.add_user(user_id, username, full_name)
    
    welcome_text = (
        f"‚öΩ –ü—Ä–∏–≤–µ—Ç, {full_name}!\n\n"
        "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É —Ñ—É—Ç–±–æ–ª—å–Ω—É—é —à–∫–æ–ª—É!\n\n"
        "–ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å:\n"
        "üìö –ò–∑—É—á–∞—Ç—å —Ç–µ—Ö–Ω–∏–∫—É —Ñ—É—Ç–±–æ–ª–∞\n"
        "üé• –°–º–æ—Ç—Ä–µ—Ç—å –æ–±—É—á–∞—é—â–∏–µ –≤–∏–¥–µ–æ\n"
        "üéØ –í—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è –∏ —Ç–µ—Å—Ç—ã\n"
        "‚≠ê –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—á–∫–∏ –∑–∞ —É—Å–ø–µ—Ö–∏\n"
        "üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if user_id in ADMIN_IDS:
        await message.answer(
            welcome_text + "\n\nüîß <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞!</b>", 
            reply_markup=admin_keyboard(),
            parse_mode="HTML"
        )
    else:
        await message.answer(welcome_text, reply_markup=main_menu_keyboard())

# –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.callback_query(F.data == "main_menu")
async def back_to_main(callback: CallbackQuery):
    user_id = callback.from_user.id
    
    if user_id in ADMIN_IDS:
        await callback.message.edit_text(
            "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\nüîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞!",
            reply_markup=admin_keyboard(),
            parse_mode="HTML"
        )
    else:
        await callback.message.edit_text(
            "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_menu_keyboard(),
            parse_mode="HTML"
        )

# –ü–æ–∫–∞–∑–∞—Ç—å –∫—É—Ä—Å—ã
@dp.callback_query(F.data == "my_courses")
async def show_courses(callback: CallbackQuery):
    courses = db.get_courses()
    
    if not courses:
        await callback.message.edit_text(
            "üìö –ö—É—Ä—Å—ã –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.\n\n"
            "üîî –ö—É—Ä—Å—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
            reply_markup=back_button()
        )
        return
    
    text = "‚öΩ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã:</b>\n\n"
    keyboard_buttons = []
    
    for course_id, title, description, price in courses:
        text += (
            f"üìñ <b>{title}</b>\n"
            f"{description}\n"
            f"üí∞ <b>–¶–µ–Ω–∞:</b> {price} —Ä—É–±.\n\n"
        )
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=f"üìñ {title}", 
                callback_data=f"course_{course_id}"
            )
        ])
    
    keyboard_buttons.append([
        InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    ])
    
    await callback.message.edit_text(
        text, 
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons),
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞
@dp.callback_query(F.data.startswith("course_"))
async def show_specific_course(callback: CallbackQuery):
    course_id = callback.data.replace("course_", "")
    courses = db.get_courses()
    
    selected_course = None
    for course in courses:
        if str(course[0]) == course_id:
            selected_course = course
            break
    
    if not selected_course:
        await callback.answer("‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    course_id_int, title, description, price = selected_course
    
    course_text = (
        f"üìñ <b>{title}</b>\n\n"
        f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{description}\n\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {price} —Ä—É–±.\n\n"
        f"üìö –í —ç—Ç–æ–º –∫—É—Ä—Å–µ –≤—ã –∏–∑—É—á–∏—Ç–µ –æ—Å–Ω–æ–≤—ã —Ñ—É—Ç–±–æ–ª–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏."
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å –∫—É—Ä—Å", callback_data=f"purchase_{course_id}")],
        [InlineKeyboardButton(text="üé• –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Ä–æ–∫ (–¥–µ–º–æ)", callback_data=f"demo_lesson_{course_id}")],
        [InlineKeyboardButton(text="üîô –ö –∫—É—Ä—Å–∞–º", callback_data="my_courses")]
    ])
    
    await callback.message.edit_text(course_text, reply_markup=keyboard, parse_mode="HTML")

# –î–µ–º–æ —É—Ä–æ–∫
@dp.callback_query(F.data.startswith("demo_lesson_"))
async def show_demo_lesson(callback: CallbackQuery):
    course_id = callback.data.replace("demo_lesson_", "")
    
    demo_text = (
        f"üé• <b>–î–µ–º–æ —É—Ä–æ–∫ - –û—Å–Ω–æ–≤—ã –¥—Ä–∏–±–ª–∏–Ω–≥–∞</b>\n\n"
        f"üìù –í —ç—Ç–æ–º —É—Ä–æ–∫–µ –≤—ã –∏–∑—É—á–∏—Ç–µ:\n"
        f"‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –¥—Ä–∏–±–ª–∏–Ω–≥–∞\n"
        f"‚Ä¢ –¢–µ—Ö–Ω–∏–∫–∞ –≤–µ–¥–µ–Ω–∏—è –º—è—á–∞\n"
        f"‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è\n\n"
        f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 15 –º–∏–Ω—É—Ç\n"
        f"‚≠ê –ó–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ: +10 –æ—á–∫–æ–≤\n\n"
        f"üí° –≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —É—Ä–æ–∫. –ü–æ–ª–Ω—ã–µ —É—Ä–æ–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –∫—É—Ä—Å–∞."
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –£—Ä–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω", callback_data=f"complete_demo_{course_id}")],
        [InlineKeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å –ø–æ–ª–Ω—ã–π –∫—É—Ä—Å", callback_data=f"purchase_{course_id}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"course_{course_id}")]
    ])
    
    await callback.message.edit_text(demo_text, reply_markup=keyboard, parse_mode="HTML")

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–µ–º–æ —É—Ä–æ–∫–∞
@dp.callback_query(F.data.startswith("complete_demo_"))
async def complete_demo_lesson(callback: CallbackQuery):
    user_id = callback.from_user.id
    course_id = callback.data.replace("complete_demo_", "")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏ –∑–∞ –¥–µ–º–æ —É—Ä–æ–∫
    db.add_points(user_id, 10)
    
    completion_text = (
        f"üéâ <b>–î–µ–º–æ —É—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω!</b>\n\n"
        f"‚úÖ –í—ã –ø–æ–ª—É—á–∏–ª–∏ +10 –æ—á–∫–æ–≤\n"
        f"üìä –í–∞—à —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω\n\n"
        f"üí° –•–æ—Ç–∏—Ç–µ –∏–∑—É—á–∏—Ç—å –±–æ–ª—å—à–µ? –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∫—É—Ä—Å!"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å –ø–æ–ª–Ω—ã–π –∫—É—Ä—Å", callback_data=f"purchase_{course_id}")],
        [InlineKeyboardButton(text="üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="my_progress")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(completion_text, reply_markup=keyboard, parse_mode="HTML")

# –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
@dp.callback_query(F.data == "my_progress")
async def show_progress(callback: CallbackQuery):
    user_id = callback.from_user.id
    progress = db.get_user_progress(user_id)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—á–∫–æ–≤
    points = progress['total_points']
    if points < 100:
        level = "ü•â –ù–æ–≤–∏—á–æ–∫"
        level_emoji = "üå±"
        next_level_points = 100
    elif points < 500:
        level = "ü•à –õ—é–±–∏—Ç–µ–ª—å"
        level_emoji = "‚ö°"
        next_level_points = 500
    elif points < 1000:
        level = "ü•á –≠–∫—Å–ø–µ—Ä—Ç"
        level_emoji = "üî•"
        next_level_points = 1000
    else:
        level = "üèÜ –ú–∞—Å—Ç–µ—Ä"
        level_emoji = "‚≠ê"
        next_level_points = points  # –£–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
    
    progress_text = (
        f"üìä <b>–¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å:</b>\n\n"
        f"{level_emoji} <b>–£—Ä–æ–≤–µ–Ω—å:</b> {level}\n"
        f"‚≠ê <b>–í—Å–µ–≥–æ –æ—á–∫–æ–≤:</b> {points}\n"
        f"üìö <b>–ü—Ä–æ–π–¥–µ–Ω–æ —É—Ä–æ–∫–æ–≤:</b> {progress['completed_lessons']}\n"
        f"‚úÖ <b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π:</b> {progress['completed_tasks']}\n\n"
    )
    
    if next_level_points > points:
        progress_text += f"üéØ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: {next_level_points - points} –æ—á–∫–æ–≤\n"
    else:
        progress_text += "üèÜ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!\n"
    
    progress_text += "\nüí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è!"
    
    await callback.message.edit_text(
        progress_text,
        reply_markup=back_button(),
        parse_mode="HTML"
    )

# –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
@dp.callback_query(F.data == "testing")
async def show_testing(callback: CallbackQuery):
    await callback.message.edit_text(
        "üéØ <b>–†–∞–∑–¥–µ–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ–π—Ç–∏ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–µ—Å—Ç—ã "
        "–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –≤ —Ñ—É—Ç–±–æ–ª–µ!\n\n"
        "–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Ç–µ—Å—Ç–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìù –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç", callback_data="theory_test")],
            [InlineKeyboardButton(text="‚öΩ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="practical_test")],
            [InlineKeyboardButton(text="üß† –¢–µ—Å—Ç –Ω–∞ –ø—Ä–∞–≤–∏–ª–∞", callback_data="rules_test")],
            [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]),
        parse_mode="HTML"
    )

# –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç (–ø—Ä–∏–º–µ—Ä)
@dp.callback_query(F.data == "theory_test")
async def theory_test(callback: CallbackQuery):
    test_question = (
        "üìù <b>–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç - –í–æ–ø—Ä–æ—Å 1/5</b>\n\n"
        "‚ùì <b>–°–∫–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø–æ–ª–µ "
        "–æ—Ç –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –≤–æ –≤—Ä–µ–º—è –º–∞—Ç—á–∞?</b>\n\n"
        "–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="A) 10 –∏–≥—Ä–æ–∫–æ–≤", callback_data="answer_a_1")],
        [InlineKeyboardButton(text="B) 11 –∏–≥—Ä–æ–∫–æ–≤", callback_data="answer_b_1")],
        [InlineKeyboardButton(text="C) 12 –∏–≥—Ä–æ–∫–æ–≤", callback_data="answer_c_1")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Ç–µ—Å—Ç–∞–º", callback_data="testing")]
    ])
    
    await callback.message.edit_text(test_question, reply_markup=keyboard, parse_mode="HTML")

# –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ
@dp.callback_query(F.data == "practical_test")
async def practical_test(callback: CallbackQuery):
    await callback.message.edit_text(
        "‚öΩ <b>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ</b>\n\n"
        "üìã <b>–ó–∞–¥–∞–Ω–∏–µ:</b> –í—ã–ø–æ–ª–Ω–∏—Ç–µ 20 –∂–æ–Ω–≥–ª–∏—Ä–æ–≤–∞–Ω–∏–π –º—è—á–æ–º\n\n"
        "üìù <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</b>\n"
        "1. –í–æ–∑—å–º–∏—Ç–µ —Ñ—É—Ç–±–æ–ª—å–Ω—ã–π –º—è—á\n"
        "2. –ñ–æ–Ω–≥–ª–∏—Ä—É–π—Ç–µ –ª—é–±–æ–π —á–∞—Å—Ç—å—é —Ç–µ–ª–∞ –∫—Ä–æ–º–µ —Ä—É–∫\n"
        "3. –°–æ—Å—á–∏—Ç–∞–π—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Å–∞–Ω–∏–π\n"
        "4. –û—Ç–º–µ—Ç—å—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∏–∂–µ\n\n"
        "‚≠ê <b>–ó–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ:</b> +30 –æ—á–∫–æ–≤",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data="complete_practical")],
            [InlineKeyboardButton(text="üìπ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ-–ø—Ä–∏–º–µ—Ä", callback_data="show_example")],
            [InlineKeyboardButton(text="üîô –ö —Ç–µ—Å—Ç–∞–º", callback_data="testing")]
        ]),
        parse_mode="HTML"
    )

# –¢–µ—Å—Ç –Ω–∞ –ø—Ä–∞–≤–∏–ª–∞
@dp.callback_query(F.data == "rules_test")
async def rules_test(callback: CallbackQuery):
    test_question = (
        "üß† <b>–¢–µ—Å—Ç –Ω–∞ –ø—Ä–∞–≤–∏–ª–∞ - –í–æ–ø—Ä–æ—Å 1/3</b>\n\n"
        "‚ùì <b>–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, –µ—Å–ª–∏ –º—è—á –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Å–µ–∫ "
        "–±–æ–∫–æ–≤—É—é –ª–∏–Ω–∏—é?</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="A) –£–≥–ª–æ–≤–æ–π —É–¥–∞—Ä", callback_data="rules_a_1")],
        [InlineKeyboardButton(text="B) –í–±—Ä–∞—Å—ã–≤–∞–Ω–∏–µ", callback_data="rules_b_1")],
        [InlineKeyboardButton(text="C) –®—Ç—Ä–∞—Ñ–Ω–æ–π —É–¥–∞—Ä", callback_data="rules_c_1")],
        [InlineKeyboardButton(text="üîô –ö —Ç–µ—Å—Ç–∞–º", callback_data="testing")]
    ])
    
    await callback.message.edit_text(test_question, reply_markup=keyboard, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∞
@dp.callback_query(F.data.in_(["answer_a_1", "answer_b_1", "answer_c_1"]))
async def handle_theory_answer(callback: CallbackQuery):
    user_id = callback.from_user.id
    
    if callback.data == "answer_b_1":  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        points_earned = 20
        db.add_points(user_id, points_earned)
        
        result_text = (
            "‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</b>\n\n"
            f"üéâ –¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª {points_earned} –æ—á–∫–æ–≤!\n\n"
            "–í —Ñ—É—Ç–±–æ–ª–µ –Ω–∞ –ø–æ–ª–µ –æ—Ç –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã "
            "–Ω–∞—Ö–æ–¥–∏—Ç—Å—è 11 –∏–≥—Ä–æ–∫–æ–≤ (–≤–∫–ª—é—á–∞—è –≤—Ä–∞—Ç–∞—Ä—è).\n\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∞–π –∏–∑—É—á–∞—Ç—å —Ñ—É—Ç–±–æ–ª! üí™"
        )
    else:
        result_text = (
            "‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ</b>\n\n"
            "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>11 –∏–≥—Ä–æ–∫–æ–≤</b>\n\n"
            "–í —Ñ—É—Ç–±–æ–ª–µ –Ω–∞ –ø–æ–ª–µ –æ—Ç –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã "
            "–Ω–∞—Ö–æ–¥–∏—Ç—Å—è 11 –∏–≥—Ä–æ–∫–æ–≤ (–≤–∫–ª—é—á–∞—è –≤—Ä–∞—Ç–∞—Ä—è).\n\n"
            "–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è, –ø—Ä–æ–¥–æ–ª–∂–∞–π —É—á–∏—Ç—å—Å—è! üìö"
        )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", callback_data="theory_question_2")],
        [InlineKeyboardButton(text="üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="my_progress")],
        [InlineKeyboardButton(text="üîô –ö —Ç–µ—Å—Ç–∞–º", callback_data="testing")]
    ])
    
    await callback.message.edit_text(result_text, reply_markup=keyboard, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ —Ç–µ—Å—Ç–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª–∞
@dp.callback_query(F.data.in_(["rules_a_1", "rules_b_1", "rules_c_1"]))
async def handle_rules_answer(callback: CallbackQuery):
    user_id = callback.from_user.id
    
    if callback.data == "rules_b_1":  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        points_earned = 25
        db.add_points(user_id, points_earned)
        
        result_text = (
            "‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ!</b>\n\n"
            f"üéâ –¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª {points_earned} –æ—á–∫–æ–≤!\n\n"
            "–ö–æ–≥–¥–∞ –º—è—á –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç –±–æ–∫–æ–≤—É—é –ª–∏–Ω–∏—é, "
            "–Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è –≤–±—Ä–∞—Å—ã–≤–∞–Ω–∏–µ —Ä—É–∫–∞–º–∏.\n\n"
            "–¢—ã —Ö–æ—Ä–æ—à–æ –∑–Ω–∞–µ—à—å –ø—Ä–∞–≤–∏–ª–∞! ‚öΩ"
        )
    else:
        result_text = (
            "‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ</b>\n\n"
            "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>–í–±—Ä–∞—Å—ã–≤–∞–Ω–∏–µ</b>\n\n"
            "–ö–æ–≥–¥–∞ –º—è—á –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç –±–æ–∫–æ–≤—É—é –ª–∏–Ω–∏—é, "
            "–∏–≥—Ä–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤–±—Ä–∞—Å—ã–≤–∞–Ω–∏–µ–º —Ä—É–∫–∞–º–∏.\n\n"
            "–ò–∑—É—á–∞–π –ø—Ä–∞–≤–∏–ª–∞ –¥–∞–ª—å—à–µ! üìñ"
        )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", callback_data="rules_question_2")],
        [InlineKeyboardButton(text="üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="my_progress")],
        [InlineKeyboardButton(text="üîô –ö —Ç–µ—Å—Ç–∞–º", callback_data="testing")]
    ])
    
    await callback.message.edit_text(result_text, reply_markup=keyboard, parse_mode="HTML")

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
@dp.callback_query(F.data == "complete_practical")
async def complete_practical_task(callback: CallbackQuery):
    user_id = callback.from_user.id
    points_earned = 30
    db.add_points(user_id, points_earned)
    
    result_text = (
        "üèÜ <b>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!</b>\n\n"
        f"üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª {points_earned} –æ—á–∫–æ–≤!\n\n"
        "üí™ –ñ–æ–Ω–≥–ª–∏—Ä–æ–≤–∞–Ω–∏–µ - –æ—Ç–ª–∏—á–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è "
        "—Ç–µ—Ö–Ω–∏–∫–∏ –∏ —á—É–≤—Å—Ç–≤–∞ –º—è—á–∞.\n\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∞–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚öΩ –î—Ä—É–≥–æ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="practical_test")],
        [InlineKeyboardButton(text="üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="my_progress")],
        [InlineKeyboardButton(text="üîô –ö —Ç–µ—Å—Ç–∞–º", callback_data="testing")]
    ])
    
    await callback.message.edit_text(result_text, reply_markup=keyboard, parse_mode="HTML")

# –ü–æ–∫—É–ø–∫–∞ –∫—É—Ä—Å–∞
@dp.callback_query(F.data == "buy_course")
async def buy_course(callback: CallbackQuery):
    courses = db.get_courses()
    
    if not courses:
        await callback.message.edit_text(
            "üìö –ö—É—Ä—Å—ã –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏.",
            reply_markup=back_button()
        )
        return
    
    text = "üí∞ <b>–ü–æ–∫—É–ø–∫–∞ –∫—É—Ä—Å–æ–≤</b>\n\n"
    keyboard_buttons = []
    
    for course_id, title, description, price in courses:
        text += f"üìñ <b>{title}</b> - {price} —Ä—É–±.\n"
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=f"üí≥ –ö—É–ø–∏—Ç—å {title}", 
                callback_data=f"purchase_{course_id}"
            )
        ])
    
    text += "\nüí° <i>–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏:</i>"
    keyboard_buttons.append([
        InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    ])
    
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons),
        parse_mode="HTML"
    )

# –ü–æ–º–æ—â—å
@dp.callback_query(F.data == "help")
async def show_help(callback: CallbackQuery):
    help_text = (
        "‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n"
        
        "üéØ <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:</b>\n\n"
        
        "1Ô∏è‚É£ <b>–ö—É—Ä—Å—ã</b> - –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã –æ–±—É—á–µ–Ω–∏—è\n"
        "2Ô∏è‚É£ <b>–ü—Ä–æ–≥—Ä–µ—Å—Å</b> - —Å–ª–µ–¥–∏ –∑–∞ —Å–≤–æ–∏–º–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏\n"
        "3Ô∏è‚É£ <b>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</b> - –ø—Ä–æ—Ö–æ–¥–∏ —Ç–µ—Å—Ç—ã –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –æ—á–∫–∏\n"
        "4Ô∏è‚É£ <b>–ü–æ–∫—É–ø–∫–∞</b> - –ø—Ä–∏–æ–±—Ä–µ—Ç–∞–π –∫—É—Ä—Å—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è\n\n"
        
        "‚≠ê <b>–°–∏—Å—Ç–µ–º–∞ –æ—á–∫–æ–≤:</b>\n"
        "‚Ä¢ –ó–∞ –¥–µ–º–æ —É—Ä–æ–∫: 10 –æ—á–∫–æ–≤\n"
        "‚Ä¢ –ó–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —Ç–µ—Å—Ç–µ: 20-25 –æ—á–∫–æ–≤\n"
        "‚Ä¢ –ó–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è: 30 –æ—á–∫–æ–≤\n"
        "‚Ä¢ –ó–∞ –ø–æ–∫—É–ø–∫—É –∫—É—Ä—Å–∞: +100 –±–æ–Ω—É—Å–Ω—ã—Ö –æ—á–∫–æ–≤\n\n"
        
        "üèÜ <b>–£—Ä–æ–≤–Ω–∏:</b>\n"
        "üå± –ù–æ–≤–∏—á–æ–∫: 0-99 –æ—á–∫–æ–≤\n"
        "‚ö° –õ—é–±–∏—Ç–µ–ª—å: 100-499 –æ—á–∫–æ–≤\n"
        "üî• –≠–∫—Å–ø–µ—Ä—Ç: 500-999 –æ—á–∫–æ–≤\n"
        "‚≠ê –ú–∞—Å—Ç–µ—Ä: 1000+ –æ—á–∫–æ–≤\n\n"
        
        "‚ùì –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏."
    )
    
    await callback.message.edit_text(
        help_text,
        reply_markup=back_button(),
        parse_mode="HTML"
    )

# –ê–¥–º–∏–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@dp.callback_query(F.data == "admin_stats")
async def admin_stats(callback: CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute("SELECT COUNT(*) FROM users")
        total_users = cursor.fetchone()[0]
        
        # –û–±—â–∏–µ –æ—á–∫–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute("SELECT SUM(total_points) FROM users")
        total_points = cursor.fetchone()[0] or 0
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
        cursor.execute("SELECT COUNT(*) FROM courses WHERE is_active = 1")
        active_courses = cursor.fetchone()[0]
        
        # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ –æ—á–∫–∞–º
        cursor.execute("SELECT full_name, total_points FROM users ORDER BY total_points DESC LIMIT 1")
        top_user = cursor.fetchone()
        
        conn.close()
        
        stats_text = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
            f"üë• <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {total_users}\n"
            f"üìö <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫—É—Ä—Å–æ–≤:</b> {active_courses}\n"
            f"‚≠ê <b>–û–±—â–∏–µ –æ—á–∫–∏:</b> {total_points}\n"
        )
        
        if top_user:
            stats_text += f"üèÜ <b>–õ–∏–¥–µ—Ä:</b> {top_user[0]} ({top_user[1]} –æ—á–∫–æ–≤)\n"
        
        stats_text += f"\nüìà <i>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</i>"
        
    except Exception as e:
        stats_text = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(
        stats_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )

# –î–æ–±–∞–≤–∏—Ç—å –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
@dp.callback_query(F.data == "admin_add_lesson")
async def admin_add_lesson(callback: CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
        return
    
    await callback.message.edit_text(
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞</b>\n\n"
        "üöß –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n"
        "üí° –í —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö –∑–¥–µ—Å—å –±—É–¥–µ—Ç:\n"
        "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —É—Ä–æ–∫–æ–≤\n"
        "‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ\n"
        "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–¥–∞–Ω–∏–π\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞–º–∏",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="main_menu")
        ]]),
        parse_mode="HTML"
    )

@dp.callback_query(F.data == "admin_tasks")
async def admin_tasks(callback: CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
        return
    
    await callback.message.edit_text(
        "üìù <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏</b>\n\n"
        "üöß –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n"
        "üí° –í —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö –∑–¥–µ—Å—å –±—É–¥–µ—Ç:\n"
        "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ –∏ –∑–∞–¥–∞–Ω–∏–π\n"
        "‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n"
        "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ü–µ–Ω–æ–∫",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="main_menu")
        ]]),
        parse_mode="HTML"
    )

# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —Ç–µ—Å—Ç–æ–≤
@dp.callback_query(F.data == "theory_question_2")
async def theory_question_2(callback: CallbackQuery):
    test_question = (
        "üìù <b>–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç - –í–æ–ø—Ä–æ—Å 2/5</b>\n\n"
        "‚ùì <b>–ö–∞–∫–∞—è —á–∞—Å—Ç—å —Ç–µ–ª–∞ –ù–ï –º–æ–∂–µ—Ç –∫–∞—Å–∞—Ç—å—Å—è –º—è—á–∞ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã "
        "(–∫—Ä–æ–º–µ –≤—Ä–∞—Ç–∞—Ä—è –≤ —à—Ç—Ä–∞—Ñ–Ω–æ–π –ø–ª–æ—â–∞–¥–∏)?</b>\n\n"
        "–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="A) –ì–æ–ª–æ–≤–∞", callback_data="answer2_a")],
        [InlineKeyboardButton(text="B) –†—É–∫–∏", callback_data="answer2_b")],
        [InlineKeyboardButton(text="C) –ì—Ä—É–¥—å", callback_data="answer2_c")],
        [InlineKeyboardButton(text="üîô –ö —Ç–µ—Å—Ç–∞–º", callback_data="testing")]
    ])
    
    await callback.message.edit_text(test_question, reply_markup=keyboard, parse_mode="HTML")

@dp.callback_query(F.data.in_(["answer2_a", "answer2_b", "answer2_c"]))
async def handle_theory_answer_2(callback: CallbackQuery):
    user_id = callback.from_user.id
    
    if callback.data == "answer2_b":  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        points_earned = 20
        db.add_points(user_id, points_earned)
        
        result_text = (
            "‚úÖ <b>–í–µ—Ä–Ω–æ!</b>\n\n"
            f"üéâ –¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª {points_earned} –æ—á–∫–æ–≤!\n\n"
            "–†—É–∫–∞–º–∏ –º—è—á –º–æ–∂–µ—Ç –∫–∞—Å–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤—Ä–∞—Ç–∞—Ä—å "
            "–≤ —Å–≤–æ–µ–π —à—Ç—Ä–∞—Ñ–Ω–æ–π –ø–ª–æ—â–∞–¥–∏.\n\n"
            "–û—Ç–ª–∏—á–Ω–æ–µ –∑–Ω–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª! ‚öΩ"
        )
    else:
        result_text = (
            "‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ</b>\n\n"
            "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>–†—É–∫–∏</b>\n\n"
            "–†—É–∫–∞–º–∏ –º—è—á –º–æ–∂–µ—Ç –∫–∞—Å–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤—Ä–∞—Ç–∞—Ä—å "
            "–≤ —Å–≤–æ–µ–π —à—Ç—Ä–∞—Ñ–Ω–æ–π –ø–ª–æ—â–∞–¥–∏.\n\n"
            "–ò–∑—É—á–∞–π –ø—Ä–∞–≤–∏–ª–∞ —Ñ—É—Ç–±–æ–ª–∞! üìö"
        )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç", callback_data="finish_theory_test")],
        [InlineKeyboardButton(text="üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="my_progress")],
        [InlineKeyboardButton(text="üîô –ö —Ç–µ—Å—Ç–∞–º", callback_data="testing")]
    ])
    
    await callback.message.edit_text(result_text, reply_markup=keyboard, parse_mode="HTML")

@dp.callback_query(F.data == "rules_question_2")
async def rules_question_2(callback: CallbackQuery):
    test_question = (
        "üß† <b>–¢–µ—Å—Ç –Ω–∞ –ø—Ä–∞–≤–∏–ª–∞ - –í–æ–ø—Ä–æ—Å 2/3</b>\n\n"
        "‚ùì <b>–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª–∏—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ—É—Ç–±–æ–ª—å–Ω—ã–π –º–∞—Ç—á?</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="A) 80 –º–∏–Ω—É—Ç", callback_data="rules2_a")],
        [InlineKeyboardButton(text="B) 90 –º–∏–Ω—É—Ç", callback_data="rules2_b")],
        [InlineKeyboardButton(text="C) 100 –º–∏–Ω—É—Ç", callback_data="rules2_c")],
        [InlineKeyboardButton(text="üîô –ö —Ç–µ—Å—Ç–∞–º", callback_data="testing")]
    ])
    
    await callback.message.edit_text(test_question, reply_markup=keyboard, parse_mode="HTML")

@dp.callback_query(F.data.in_(["rules2_a", "rules2_b", "rules2_c"]))
async def handle_rules_answer_2(callback: CallbackQuery):
    user_id = callback.from_user.id
    
    if callback.data == "rules2_b":  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        points_earned = 25
        db.add_points(user_id, points_earned)
        
        result_text = (
            "‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</b>\n\n"
            f"üéâ –¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª {points_earned} –æ—á–∫–æ–≤!\n\n"
            "–§—É—Ç–±–æ–ª—å–Ω—ã–π –º–∞—Ç—á –¥–ª–∏—Ç—Å—è 90 –º–∏–Ω—É—Ç: "
            "–¥–≤–∞ —Ç–∞–π–º–∞ –ø–æ 45 –º–∏–Ω—É—Ç + –∫–æ–º–ø–µ–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.\n\n"
            "–¢—ã –æ—Ç–ª–∏—á–Ω–æ –∑–Ω–∞–µ—à—å —Ñ—É—Ç–±–æ–ª! üèÜ"
        )
    else:
        result_text = (
            "‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ</b>\n\n"
            "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>90 –º–∏–Ω—É—Ç</b>\n\n"
            "–§—É—Ç–±–æ–ª—å–Ω—ã–π –º–∞—Ç—á –¥–ª–∏—Ç—Å—è 90 –º–∏–Ω—É—Ç: "
            "–¥–≤–∞ —Ç–∞–π–º–∞ –ø–æ 45 –º–∏–Ω—É—Ç + –∫–æ–º–ø–µ–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.\n\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∞–π –∏–∑—É—á–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞! üìñ"
        )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç", callback_data="finish_rules_test")],
        [InlineKeyboardButton(text="üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="my_progress")],
        [InlineKeyboardButton(text="üîô –ö —Ç–µ—Å—Ç–∞–º", callback_data="testing")]
    ])
    
    await callback.message.edit_text(result_text, reply_markup=keyboard, parse_mode="HTML")

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤
@dp.callback_query(F.data == "finish_theory_test")
async def finish_theory_test(callback: CallbackQuery):
    user_id = callback.from_user.id
    user_points = db.get_user_points(user_id)
    
    final_text = (
        "üèÅ <b>–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
        f"üìä <b>–¢–≤–æ–∏ —Ç–µ–∫—É—â–∏–µ –æ—á–∫–∏:</b> {user_points}\n"
        f"üéØ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –¢—ã –ø—Ä–æ–≤–µ—Ä–∏–ª —Å–≤–æ–∏ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞–Ω–∏—è.\n\n"
        f"üí° –°–æ–≤–µ—Ç: –ø—Ä–æ—Ö–æ–¥–∏ —Ç–µ—Å—Ç—ã —Ä–µ–≥—É–ª—è—Ä–Ω–æ, —á—Ç–æ–±—ã —É–ª—É—á—à–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–π—Ç–∏ —Å–Ω–æ–≤–∞", callback_data="theory_test")],
        [InlineKeyboardButton(text="‚öΩ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è", callback_data="practical_test")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(final_text, reply_markup=keyboard, parse_mode="HTML")

@dp.callback_query(F.data == "finish_rules_test")
async def finish_rules_test(callback: CallbackQuery):
    user_id = callback.from_user.id
    user_points = db.get_user_points(user_id)
    
    final_text = (
        "üèÅ <b>–¢–µ—Å—Ç –Ω–∞ –ø—Ä–∞–≤–∏–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
        f"üìä <b>–¢–≤–æ–∏ —Ç–µ–∫—É—â–∏–µ –æ—á–∫–∏:</b> {user_points}\n"
        f"üß† –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! –¢—ã —Ö–æ—Ä–æ—à–æ –∑–Ω–∞–µ—à—å –ø—Ä–∞–≤–∏–ª–∞ —Ñ—É—Ç–±–æ–ª–∞.\n\n"
        f"‚öΩ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∑–Ω–∞–Ω–∏—è –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ!"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–π—Ç–∏ —Å–Ω–æ–≤–∞", callback_data="rules_test")],
        [InlineKeyboardButton(text="üìù –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç", callback_data="theory_test")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(final_text, reply_markup=keyboard, parse_mode="HTML")

# –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä –≤–∏–¥–µ–æ
@dp.callback_query(F.data == "show_example")
async def show_video_example(callback: CallbackQuery):
    await callback.message.edit_text(
        "üìπ <b>–í–∏–¥–µ–æ-–ø—Ä–∏–º–µ—Ä –∂–æ–Ω–≥–ª–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
        "üé• –í —ç—Ç–æ–º –≤–∏–¥–µ–æ –ø–æ–∫–∞–∑–∞–Ω—ã –æ—Å–Ω–æ–≤—ã –∂–æ–Ω–≥–ª–∏—Ä–æ–≤–∞–Ω–∏—è:\n"
        "‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≥–∏\n"
        "‚Ä¢ –¢–µ—Ö–Ω–∏–∫–∞ –∫–∞—Å–∞–Ω–∏—è –º—è—á–∞\n"
        "‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å –≤—ã—Å–æ—Ç—ã –ø–æ–¥–±—Ä–æ—Å–∞\n"
        "‚Ä¢ –†–∏—Ç–º –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è\n\n"
        "üí° <i>–í–∏–¥–µ–æ-–∫–æ–Ω—Ç–µ–Ω—Ç –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏</i>\n\n"
        "üéØ –ü–æ–ø—Ä–æ–±—É–π –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è –∏–∑ –≤–∏–¥–µ–æ!",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–ø—Ä–æ–±–æ–≤–∞–ª, –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ", callback_data="complete_practical")],
            [InlineKeyboardButton(text="üîô –ö –∑–∞–¥–∞–Ω–∏—é", callback_data="practical_test")]
        ]),
        parse_mode="HTML"
    )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    print(f"üìã –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {DB_PATH}")
    print(f"üîë –¢–æ–∫–µ–Ω –±–æ—Ç–∞: {BOT_TOKEN[:10]}...")
    print(f"üëë –ê–¥–º–∏–Ω—ã: {ADMIN_IDS}")
    
    # –£–¥–∞–ª—è–µ–º webhook –∏ –∑–∞–ø—É—Å–∫–∞–µ–º polling
    await bot.delete_webhook(drop_pending_updates=True)
    print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    print("üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
    
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
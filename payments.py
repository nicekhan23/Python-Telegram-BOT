from aiogram import types, F, Router
from aiogram.types import LabeledPrice, PreCheckoutQuery, InlineKeyboardMarkup, InlineKeyboardButton
import json

payments_router = Router()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
PAYMENT_PROVIDER_TOKEN = ""  # –ü–æ–ª—É—á–∏—Ç—å —É @BotFather –∫–æ–º–∞–Ω–¥–æ–π /mybots -> Bot Settings -> Payments

# –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞
@payments_router.callback_query(F.data.startswith("purchase_"))
async def create_invoice(callback: types.CallbackQuery, bot):
    course_id = callback.data.replace("purchase_", "")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    from database import Database
    from config import DB_PATH
    
    db = Database(DB_PATH)
    courses = db.get_courses()
    
    # –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –∫—É—Ä—Å
    selected_course = None
    for course in courses:
        if str(course[0]) == course_id:
            selected_course = course
            break
    
    if not selected_course:
        await callback.answer("‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    course_id_int, title, description, price = selected_course
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ª–∏ –ø–ª–∞—Ç–µ–∂–∏
    if not PAYMENT_PROVIDER_TOKEN:
        await callback.message.edit_text(
            "üí≥ <b>–ü–ª–∞—Ç–µ–∂–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</b>\n\n"
            "üîß –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n\n"
            f"üìñ <b>–ö—É—Ä—Å:</b> {title}\n"
            f"üí∞ <b>–¶–µ–Ω–∞:</b> {price} —Ä—É–±.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –ö –∫—É—Ä—Å–∞–º", callback_data="buy_course")
            ]]),
            parse_mode="HTML"
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å
    prices = [LabeledPrice(label=title, amount=price * 100)]  # –≤ –∫–æ–ø–µ–π–∫–∞—Ö
    
    await bot.send_invoice(
        chat_id=callback.from_user.id,
        title=f"–ö—É—Ä—Å: {title}",
        description=description,
        payload=f"course_{course_id}",
        provider_token=PAYMENT_PROVIDER_TOKEN,
        currency="RUB",
        prices=prices,
        start_parameter=f"course-{course_id}",
        photo_url="https://example.com/course-image.jpg",  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
        photo_size=512,
        photo_width=512,
        photo_height=512,
        need_name=False,
        need_phone_number=False,
        need_email=False,
        need_shipping_address=False,
        send_phone_number_to_provider=False,
        send_email_to_provider=False,
        is_flexible=False,
    )
    
    await callback.answer("üí≥ –ò–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω!")

# Pre-checkout –∑–∞–ø—Ä–æ—Å
@payments_router.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery, bot):
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

# Successful payment
@payments_router.message(F.successful_payment)
async def process_successful_payment(message: types.Message):
    payment = message.successful_payment
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫—É—Ä—Å–∞ –∏–∑ payload
    payload = payment.invoice_payload
    course_id = payload.replace("course_", "")
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫—É—Ä—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from database import Database
    from config import DB_PATH
    
    db = Database(DB_PATH)
    user_id = message.from_user.id
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    conn = db.get_connection() if hasattr(db, 'get_connection') else None
    if conn:
        cursor = conn.cursor()
        cursor.execute('''
            UPDATE users SET subscription_active = 1, current_course_id = ?
            WHERE user_id = ?
        ''', (course_id, user_id))
        conn.commit()
        conn.close()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å–Ω—ã–µ –æ—á–∫–∏ –∑–∞ –ø–æ–∫—É–ø–∫—É
    db.add_points(user_id, 100)
    
    success_text = (
        f"üéâ <b>–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!</b>\n\n"
        f"üí∞ <b>–°—É–º–º–∞:</b> {payment.total_amount // 100} {payment.currency}\n"
        f"üÜî <b>ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b> {payment.telegram_payment_charge_id}\n\n"
        f"‚úÖ –ö—É—Ä—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n"
        f"üéÅ <b>–ë–æ–Ω—É—Å:</b> +100 –æ—á–∫–æ–≤\n\n"
        f"üìö –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –æ–±—É—á–µ–Ω–∏—é!"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìñ –ú–æ–∏ –∫—É—Ä—Å—ã", callback_data="my_courses")],
        [InlineKeyboardButton(text="üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="my_progress")]
    ])
    
    await message.answer(success_text, reply_markup=keyboard, parse_mode="HTML")

# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–ø–ª–∞—Ç—ã (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
@payments_router.callback_query(F.data.startswith("test_purchase_"))
async def test_purchase(callback: types.CallbackQuery):
    """–¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
    course_id = callback.data.replace("test_purchase_", "")
    user_id = callback.from_user.id
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –ø–æ–∫—É–ø–∫—É
    from database import Database
    from config import DB_PATH
    
    db = Database(DB_PATH)
    db.add_points(user_id, 100)
    
    await callback.message.edit_text(
        f"üß™ <b>–¢–ï–°–¢–û–í–ê–Ø –ü–û–ö–£–ü–ö–ê</b>\n\n"
        f"‚úÖ –ö—É—Ä—Å #{course_id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n"
        f"üéÅ –ü–æ–ª—É—á–µ–Ω–æ: +100 –æ—á–∫–æ–≤\n\n"
        f"‚ö†Ô∏è <i>–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏</i>",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìñ –ú–æ–∏ –∫—É—Ä—Å—ã", callback_data="my_courses")]
        ]),
        parse_mode="HTML"
    )

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø–ª–∞—Ç–µ–∂–µ–π
def get_payment_setup_instructions():
    return (
        "üí≥ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π Telegram</b>\n\n"
        
        "<b>–®–∞–≥ 1:</b> –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞\n"
        "1. –ù–∞–π–¥–∏—Ç–µ @BotFather –≤ Telegram\n"
        "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /mybots\n"
        "3. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞\n"
        "4. Bot Settings ‚Üí Payments\n"
        "5. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞\n\n"
        
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã:</b>\n"
        "‚Ä¢ –ÆKassa (–¥–ª—è –†–æ—Å—Å–∏–∏)\n"
        "‚Ä¢ Stripe (–º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ)\n"
        "‚Ä¢ PayPal\n"
        "‚Ä¢ –°–±–µ—Ä–±–∞–Ω–∫\n\n"
        
        "<b>–®–∞–≥ 2:</b> –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞\n"
        "–í —Ñ–∞–π–ª–µ config.py —É–∫–∞–∂–∏—Ç–µ:\n"
        "<code>PAYMENT_PROVIDER_TOKEN = '2051251535:TEST:OTk5MDA4ODgxLTAwNQ'</code>\n\n"
        
        "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã!"
    )
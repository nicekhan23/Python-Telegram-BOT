from aiogram import types, F, Router
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from database import Database
from config import ADMIN_IDS

video_router = Router()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ –æ—Ç –∞–¥–º–∏–Ω–∞
@video_router.message(F.video)
async def handle_video_upload(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å –≤–∏–¥–µ–æ!")
        return
    
    video_file_id = message.video.file_id
    video_duration = message.video.duration
    video_size = message.video.file_size
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
    response_text = (
        f"üìπ <b>–í–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ!</b>\n\n"
        f"üÜî <b>File ID:</b> <code>{video_file_id}</code>\n"
        f"‚è± <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {video_duration} —Å–µ–∫.\n"
        f"üíæ <b>–†–∞–∑–º–µ—Ä:</b> {video_size // 1024 // 1024} –ú–ë\n\n"
        f"üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ File ID –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —É—Ä–æ–∫</i>"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —É—Ä–æ–∫ —Å —ç—Ç–∏–º –≤–∏–¥–µ–æ", 
                            callback_data=f"create_lesson_{video_file_id}")]
    ])
    
    await message.reply(response_text, reply_markup=keyboard, parse_mode="HTML")

# –°–æ–∑–¥–∞–Ω–∏–µ —É—Ä–æ–∫–∞ —Å –≤–∏–¥–µ–æ
@video_router.callback_query(F.data.startswith("create_lesson_"))
async def create_lesson_with_video(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return
    
    video_file_id = callback.data.replace("create_lesson_", "")
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å FSM –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É—Ä–æ–∫–∞
    await callback.message.edit_text(
        f"üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ —É—Ä–æ–∫–∞</b>\n\n"
        f"–í–∏–¥–µ–æ: <code>{video_file_id}</code>\n\n"
        f"üí° <i>–§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —É—Ä–æ–∫–æ–≤ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö</i>",
        parse_mode="HTML"
    )

# –ü–æ–∫–∞–∑ –≤–∏–¥–µ–æ —É—Ä–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def show_lesson_video(bot, chat_id: int, lesson_id: int, db: Database):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤–∏–¥–µ–æ —É—Ä–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–∫–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = db.get_connection()
    cursor = conn.cursor()
    cursor.execute('''
        SELECT title, description, video_file_id, points_reward 
        FROM lessons WHERE id = ?
    ''', (lesson_id,))
    
    lesson = cursor.fetchone()
    conn.close()
    
    if not lesson:
        await bot.send_message(chat_id, "‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    title, description, video_file_id, points = lesson
    
    if not video_file_id:
        await bot.send_message(
            chat_id, 
            f"üìö <b>{title}</b>\n\n{description}\n\n‚ùå –í–∏–¥–µ–æ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
            parse_mode="HTML"
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
    caption = (
        f"üé• <b>{title}</b>\n\n"
        f"{description}\n\n"
        f"‚≠ê <b>–ó–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä:</b> +{points} –æ—á–∫–æ–≤"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –£—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω", 
                            callback_data=f"complete_lesson_{lesson_id}")],
        [InlineKeyboardButton(text="üîô –ö –∫—É—Ä—Å—É", callback_data="my_courses")]
    ])
    
    await bot.send_video(
        chat_id=chat_id,
        video=video_file_id,
        caption=caption,
        reply_markup=keyboard,
        parse_mode="HTML"
    )